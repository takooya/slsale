<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
                http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd   
                http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd   
                http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd 
                http://www.springframework.org/schema/context 
                http://www.springframework.org/schema/context/spring-context.xsd">
    <!-- spring扫描包下所有类，让标注spring注解的类生效 -->
    <context:component-scan base-package="org.slsale"/>

    <!-- 读取JDBC的配置文件 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!-- JNDI获取数据源（dbcp连接池） -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close" scope="singleton">
        <property name="driverClass" value="${driverClassName}"/>
        <property name="jdbcUrl" value="${url}"/>
        <property name="user" value="${uname}"/>
        <property name="password" value="${password}"/>

        <property name="minPoolSize" value="${jdbc.minPoolSize}"/>
        <property name="maxPoolSize" value="${jdbc.maxPoolSize}"/>
        <property name="initialPoolSize" value="${jdbc.initialPoolSize}"/>
        <!--mysql的wait_timeout是8hour,超过8小时会断开服务器连接-->
        <!--此属性略小于wait_timeout, 防止陈旧的连接分发出去-->
        <property name="maxIdleTime" value="${jdbc.maxIdleTime}"/>
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
        <property name="acquireIncrement" value="${jdbc.acquireIncrement}"/>
        <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
        <property name="acquireRetryAttempts" value="${jdbc.acquireRetryAttempts}"/>
        <!--两次连接中间隔时间，单位毫秒。Default: 1000 -->
        <property name="acquireRetryDelay" value="${jdbc.acquireRetryDelay}"/>
        <!--获取connnection时测试是否有效-->
        <property name="testConnectionOnCheckin" value="${jdbc.testConnectionOnCheckin}"/>
        <!--自动测试的table名称-->
        <property name="automaticTestTable" value="${jdbc.automaticTestTable}"/>
        <!--set to something much less than wait_timeout, prevents connections from going stale-->
        <property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}"/>
        <!--当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出
SQLException,如设为0则无限期等待。单位毫秒。Default: 0 -->
        <property name="checkoutTimeout" value="${jdbc.checkoutTimeout}"/>
        <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的
时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable
等方法来提升连接测试的性能。Default: false -->
        <property name="testConnectionOnCheckout" value="true"/>
    </bean>

    <!-- 事务管理 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 配置mybatis sqlSessionFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>
    <!-- AOP事务处理  -->
    <aop:aspectj-autoproxy/>
    <aop:config proxy-target-class="true">
        <aop:pointcut expression="execution(* *org.slsale.service..*(..))" id="transService"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="transService"/>
    </aop:config>
    <!-- txAdvice:需要定义事务管理器，进行事务处理 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="hl*" propagation="REQUIRED" rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>

    <!-- mapper 接口所在包名，spring会自动查找其下的Mapper -->
    <bean class=" org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="org.slsale.dao"/>
    </bean>

    <!-- redis配置 -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="5"/>
        <!--老版本的maxActive,-1为不限制-->
        <property name="maxTotal" value="90"/>
        <!--老版本的maxWait,超出时间抛出异常-->
        <property name="maxWaitMillis" value="1000"/>
        <!--获得的jedis实例是否校验其可用性,true为校验,此时获得的jedis实例均为可用-->
        <property name="testOnBorrow" value="true"/>
        <!--<property name="testOnReturn" value="${redis.pool.testOnReturn}" />-->
    </bean>
    <bean id="jedisPool" class="redis.clients.jedis.JedisPool" destroy-method="destroy">
        <constructor-arg ref="jedisPoolConfig"/>
        <constructor-arg value="172.20.10.3" type="java.lang.String"/>
        <constructor-arg value="6379" type="int"/>
    </bean>
    <bean id="redisAPI" class="org.slsale.common.RedisAPI">
        <property name="jedisPool" ref="jedisPool"/>
    </bean>
</beans>
      
      
      
      
      
      
      